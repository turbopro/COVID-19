SNE_df <- data.frame(index(SNE_adj), stack(as.data.frame(sne_n)))
SNE_df
r <- 1.618
n <- 5
a1 <- 1:n
typecalc <- function(a, r, n) {
for (i in 1:n) {
append(a1, a1*r)
}
a1 <- 10
typecalc(a1, r, n)
typecalc <- function(a, r, n) {
for (i in 1:n) {
a1 <- append(a1, a1*r)
}
typecalc(a1, r, n)
a1
typecalc(a1, r, n)
a1
a1 <- typecalc(a1, r, n)
typecalc <- function(a, r, n) {
for (i in 1:n) {
a <- append(a, a*r)
return(a)
}
a1 <- typecalc(a1, r, n)
typecalc(a1, r, n)
for (i in 1:n) {
a1 <- append(a1, a1*r)
}
a1 <- 10
for (i in 1:n) {
a1 <- append(a1, a1*r)
}
a1
a1 <- 10
for (i in 1:n) {
append(a1, a1*r)
}
a <- 10
for (i in 1:n) {
a <- append(a, a1*r)
}
a
a1[1]
for (i in 1:n) {
a_r <- a1[i]*r
a1 <- append(a1, a_r)
}
a1
typecalc <- function(a, r, n) {
for (i in 1:n) {
a_r <- a[i]*r
a <- append(a, a_r)
return(a)
}
typecalc(a1, r, n)
a1 <- 12
typecalc <- function(a, r, n) {
for (i in 1:n) {
a_r <- a[i]*r
a <- append(a, a_r)
return(round(a))
}
typecalc(a1, r, n)
typecalc <- function(a, r, n) {
for (i in 1:n) {
a_r <- a[i]*r
a <- append(a, a_r)
return(round(a))
}
typecalc(a1, r, n)
a1
for (i in 1:n) {
a_r <- a1[i]*r
a1 <- append(a1, a_r)
}
a1
res <- a1 + 1.618**5
a1 <- 12
res <- round(a1 + 1.618)
res <- round(a1 + 1.618**2)
res <- round(a1 + 1.618)
res1 <- round(res + 1.618**2)
a1 <- 12
n <- 6
r <- 1.618
for (i in 1:n) {
a_r <- a1[i] + r**(i-1)
a1 <- append(a1, a_r)
}
a1
a1 <- 12
for (i in 1:n) {
a_r <- round(a1[i] + r**(i-1))
a1 <- append(a1, a_r)
}
a1 <- 12
for (i in 1:n) {
a_r <- ceiling(a1[i] + r**(i-1))
a1 <- append(a1, a_r)
}
a1 <- 12
for (i in 1:n) {
a_r <- ceiling(a1[1] + r**(i-1))
a1 <- append(a1, a_r)
}
a1 <- 12
for (i in 1:n) {
a_r <- a1[1] + r**(i-1)
a1 <- append(a1, a_r)
}
a1
n <- 12
a1 <- 12
for (i in 1:n) {
a_r <- a1[1] + r**(i-1)
a1 <- append(a1, a_r)
}
a1
1.618**2
14 + 1.618**2
17 + 1.618**3
19 + 1.618**3
### STEP 1 call libraries #####
### libraries
library(xts)
library(tidyverse)
#library(tidyr)
library(magrittr)
library(reshape2)
#setwd("~/Documents/utils/covid-19/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
setwd("~/Documents/utils/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
# set number display to non-scientific
options(scipen=5)
### STEP 2: Load Data ####
dat_confirmed <- read_csv("./time_series_covid19_confirmed_global.csv")
dat_deaths <- read_csv("./time_series_covid19_deaths_global.csv")
dat_recovered <- read_csv("./time_series_covid19_recovered_global.csv")
### STEP 3: Do countries measures ##########
# SET COUNTRIES
#countries <- c("Brazil", "China", "Italy", "Spain", "US")
countries <- c("US", "Italy", "China", "Spain", "Germany", "Korea, South", "France")
dat_tidy_conf <- dat_confirmed %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy_conf) <- c("Day", "Country", "ConfirmedCases")
dat_tidy_conf
dat_conf <- NULL
for(c in countries) {
dat_conf <- bind_rows( dat_conf, filter(dat_tidy_conf, Country == c))
}
dat_conf
ggplot(dat_conf, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh") +
# #annotate("text", x = as.Date("2020-03-10"), y = 220000,
#          label = paste0("Brazil = ", dat_conf$ConfirmedCases[dim(dat_conf)[1]/5]),
#          fontface = "bold", size = 3) +
# annotate("text", x = as.Date("2020-03-10"), y = 200000,
#          label = paste0("China = ", dat_conf$ConfirmedCases[2 * (dim(dat_conf)[1])/5]),
#          fontface = "bold", size = 3) +
# annotate("text", x = as.Date("2020-03-10"), y = 180000,
#          label = paste0("Italy = ", dat_conf$ConfirmedCases[3 * (dim(dat_conf)[1])/5]),
#          fontface = "bold", size = 3) +
# annotate("text", x = as.Date("2020-03-10"), y = 160000,
#          label = paste0("Spain = ", dat_conf$ConfirmedCases[4 * (dim(dat_conf)[1])/5]),
#          fontface = "bold", size = 3) +
# annotate("text", x = as.Date("2020-03-10"), y = 140000,
#          label = paste0("US = ", dat_conf$ConfirmedCases[dim(dat_conf)[1]]),
#          fontface = "bold", size = 3) +
ggtitle(paste0("Confirmed Cases as of ", dat_conf$Day[dim(dat_conf)[1]]))
### STEP 3: Do countries measures ##########
# SET COUNTRIES
countries <- c("Brazil", "China", "Italy", "Spain", "US")
dat_tidy_conf <- dat_confirmed %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy_conf) <- c("Day", "Country", "ConfirmedCases")
dat_tidy_conf
dat_conf <- NULL
for(c in countries) {
dat_conf <- bind_rows( dat_conf, filter(dat_tidy_conf, Country == c))
}
dat_conf
ggplot(dat_conf, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh") +
annotate("text", x = as.Date("2020-03-10"), y = 220000,
label = paste0("Brazil = ", dat_conf$ConfirmedCases[dim(dat_conf)[1]/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 200000,
label = paste0("China = ", dat_conf$ConfirmedCases[2 * (dim(dat_conf)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 180000,
label = paste0("Italy = ", dat_conf$ConfirmedCases[3 * (dim(dat_conf)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 160000,
label = paste0("Spain = ", dat_conf$ConfirmedCases[4 * (dim(dat_conf)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 140000,
label = paste0("US = ", dat_conf$ConfirmedCases[dim(dat_conf)[1]]),
fontface = "bold", size = 3) +
ggtitle(paste0("Confirmed Cases as of ", dat_conf$Day[dim(dat_conf)[1]]))
### CREATE dat_curr_conf ####
i <- 1
dat_curr_conf <- NULL
for(c in countries) {
idx <- i * (dim(dat_conf)[1]) / length(countries)
temp_df <- data.frame(Day = dat_conf$Day[idx],
Country = dat_conf$Country[idx],
Count = dat_conf$ConfirmedCases[idx])
dat_curr_conf <- bind_rows( dat_curr_conf, temp_df)
i <- i + 1
}
dat_curr_conf
ggplot(dat_curr_conf, aes(x = reorder(Country, -Count), y = Count)) +
geom_col(fill = "skyblue", width = 0.5) +
geom_text(aes(label=Count), vjust=0)
# deaths
dat_tidy_death <- dat_deaths %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy_death) <- c("Day", "Country", "Deaths")
head(dat_tidy_death)
dat_death <- NULL
for(c in countries) {
dat_death <- bind_rows( dat_death, filter(dat_tidy_death, Country == c))
}
str(dat_death)
head(dat_death)
ggplot(dat_death, aes(x = Day, y = Deaths, Country)) +
geom_step(aes(color = Country), direction = "vh") +
annotate("text", x = as.Date("2020-03-10"), y = 9000,
label = paste0("Brazil = ", dat_death$Deaths[dim(dat_death)[1]/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 8000,
label = paste0("China = ", dat_death$Deaths[2 * (dim(dat_death)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 7000,
label = paste0("Italy = ", dat_death$Deaths[3 * (dim(dat_death)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 6000,
label = paste0("Spain = ", dat_death$Deaths[4 * (dim(dat_death)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 5000,
label = paste0("US = ", dat_death$Deaths[dim(dat_death)[1]]),
fontface = "bold", size = 3) +
ggtitle(paste0("Deaths as of ", dat_death$Day[dim(dat_death)[1]]))
### CREATE dat_curr_death ####
i <- 1
dat_curr_death <- NULL
for(c in countries) {
idx <- i * (dim(dat_death)[1]) / length(countries)
temp_df <- data.frame(Day = dat_death$Day[idx],
Country = dat_death$Country[idx],
Count = dat_death$Deaths[idx])
dat_curr_death <- bind_rows( dat_curr_death, temp_df)
i <- i + 1
}
dat_curr_death
ggplot(dat_curr_death, aes(x = reorder(Country, Count), y = Count, fill = Country)) +
geom_col(fill = "skyblue", width = 0.5) +
#geom_col(width = 0.5) +
geom_text(aes(label=Count), vjust=0) +
#scale_colour_brewer()
#scale_fill_brewer(direction = -1) +
coord_flip()
# recovery
dat_tidy_recov <- dat_recovered %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy_recov) <- c("Day", "Country", "Recoveries")
head(dat_tidy_recov)
dat_recoveries <- NULL
for(c in countries) {
dat_recoveries <- bind_rows( dat_recoveries, filter(dat_tidy_recov, Country == c))
}
str(dat_recoveries)
head(dat_recoveries)
ggplot(dat_recoveries, aes(x = Day, y = Recoveries, Country)) +
geom_step(aes(color = Country), direction = "vh") +
annotate("text", x = as.Date("2020-03-10"), y = 50000,
label = paste0("Brazil = ", dat_recoveries$Recoveries[dim(dat_recoveries)[1]/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 45000,
label = paste0("China = ", dat_recoveries$Recoveries[2 * (dim(dat_recoveries)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 40000,
label = paste0("Italy = ", dat_recoveries$Recoveries[3 * (dim(dat_recoveries)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 35000,
label = paste0("Spain = ", dat_recoveries$Recoveries[4 * (dim(dat_recoveries)[1])/5]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-10"), y = 30000,
label = paste0("US = ", dat_recoveries$Recoveries[dim(dat_recoveries)[1]]),
fontface = "bold", size = 3) +
ggtitle(paste0("Recoveries as of ", dat_recoveries$Day[dim(dat_recoveries)[1]]))
### CREATE dat_curr_recov ####
i <- 1
dat_curr_recov <- NULL
for(c in countries) {
idx <- i * (dim(dat_recoveries)[1]) / length(countries)
temp_df <- data.frame(Day = dat_recoveries$Day[idx],
Country = dat_recoveries$Country[idx],
Count = dat_recoveries$Recoveries[idx])
dat_curr_recov <- bind_rows( dat_curr_recov, temp_df)
i <- i + 1
}
dat_curr_recov
ggplot(dat_curr_recov, aes(x = reorder(Country, Count), y = Count, fill = Country)) +
geom_col(fill = "skyblue", width = 0.5) +
#geom_col(width = 0.5) +
geom_text(aes(label=Count), vjust=0) +
#scale_colour_brewer()
#scale_fill_brewer(direction = -1) +
coord_flip()
### STEP 4: CREATE dat_curr ####
dat_curr <- dat_curr_death[,-3]
dat_curr$Confirmed <- dat_curr_conf$Count
dat_curr$Deaths <- dat_curr_death$Count
dat_curr$Recoveries <- dat_curr_recov$Count
dat_curr
##### PLOT PLOTS #####
### STEP 5: Create NY & US plots ####
# load data for confirmed
dat_dates <- dat_confirmed %>% gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long'))
### US
US_dat <- dat_dates %>%
filter(`Country/Region` == "US")
# convert Day from 'chr' to 'Date'
US_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
US_xts <- xts(US_dat$CaseCount, order.by = US_dat$Day)
names(US_xts) <- "Count"
curr_len <- nrow(US_xts)
plot(US_xts, type = "S",
main = paste("US Confirmed Cases:", as.numeric(US_xts$Count[curr_len]),
"\nAs of:", time(US_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
NY_xts_03042020 <- readRDS("~/Documents/utils/COVID-19/csse_covid_19_data/csse_covid_19_time_series/NY_xts_03042020.rds")
NY_xtsd_03042020 <- readRDS("~/Documents/utils/COVID-19/csse_covid_19_data/csse_covid_19_time_series/NY_xtsd_03042020.rds")
### CREATE NY_xts, NY Confirmed ####
dat_ny <- read_csv("./04-04-2020.csv")
dat_nycount <- dat_ny %>%
select(c(Province_State, Country_Region, Last_Update, Confirmed, Deaths, Recovered)) %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
group_by(Province_State) %>%
summarise(Count = sum(Confirmed, na.rm = TRUE)) %>%
filter(Province_State == "New York")
dat_nycount
update_ny <- xts(dat_nycount$Count, as.Date("2020-04-04"))
names(update_ny) <- "Count"
NY_xts <- rbind(NY_xts_03042020, update_ny)
# save current xts to file
saveRDS(NY_xts, file = "./NY_xts_04042020.rds")
curr_len <- nrow(NY_xts)
plot(NY_xts, type = "S",
main = paste("NY Confirmed Cases:", as.numeric(NY_xts$Count[curr_len]),
"\nAs of:", time(NY_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### Italy
IT_dat <- dat_dates %>%
filter(`Country/Region` == "Italy")
# convert Day from 'chr' to 'Date'
IT_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
IT_xts <- xts(IT_dat$CaseCount, order.by = IT_dat$Day)
names(IT_xts) <- "Count"
curr_len <- nrow(IT_xts)
plot(IT_xts, type = "S",
main = paste("Italy Confirmed Cases:", as.numeric(IT_xts$Count[curr_len]),
"\nAs of:", time(IT_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### triple plots
#par(mfrow = c(3, 1), mar = c(3, 3, 3, 3))
plot(US_xts, type = "S",
main = paste("Italy Confirmed Cases:", as.numeric(IT_xts$Count[curr_len]),
"\nNY Confirmed Cases:", as.numeric(NY_xts$Count[curr_len]),
"\nUS Confirmed Cases:", as.numeric(US_xts$Count[curr_len]),
"                                                     Date:", time(IT_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
lines(NY_xts, type = "S", col = "blue")
lines(IT_xts, type = "S", col = "black")
plot(US_xts, type = "S",
main = paste("\nNY Confirmed Cases:", as.numeric(NY_xts$Count[curr_len]),
"\nUS Confirmed Cases:", as.numeric(US_xts$Count[curr_len]),
"                                                     Date:", time(US_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
lines(NY_xts, type = "S", col = "blue")
# load data
dat_Ds <- dat_deaths %>% gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long'))
### US
US_Ds <- dat_Ds %>%
filter(`Country/Region` == "US")
# convert Day from 'chr' to 'Date'
US_Ds %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
US_Ds_xts <- xts(US_Ds$CaseCount, order.by = US_Ds$Day)
names(US_Ds_xts) <- "Count"
curr_len <- nrow(US_Ds_xts)
plot(US_Ds_xts, type = "S",
main = paste("US Deaths:", as.numeric(US_Ds_xts$Count[curr_len]),
"\nAs of:", time(US_Ds_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### CREATE NY_xtsd, NY Deaths ####
dat_nyd <- read_csv("./04-04-2020.csv")
dat_nycountd <- dat_nyd %>%
select(c(Province_State, Country_Region, Last_Update, Confirmed, Deaths, Recovered)) %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
group_by(Province_State) %>%
summarise(Count = sum(Deaths, na.rm = TRUE)) %>%
filter(Province_State == "New York")
dat_nycountd
update_nyd <- xts(dat_nycountd$Count, as.Date("2020-04-04"))
names(update_nyd) <- "Count"
NY_xtsd <- rbind(NY_xtsd_03042020, update_nyd)
# save current xts to file
saveRDS(NY_xtsd, file = "./NY_xtsd_04042020.rds")
curr_len <- nrow(NY_xtsd)
plot(NY_xtsd, type = "S",
main = paste("NY Deaths:", as.numeric(NY_xtsd$Count[curr_len]),
"\nAs of:", time(NY_xtsd[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### Italy
IT_Ds <- dat_Ds %>%
filter(`Country/Region` == "Italy")
# convert Day from 'chr' to 'Date'
IT_Ds %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases))
IT_Ds_xts <- xts(IT_Ds$CaseCount, order.by = IT_Ds$Day)
names(IT_Ds_xts) <- "Count"
curr_len <- nrow(IT_Ds_xts)
plot(IT_Ds_xts, type = "S",
main = paste("Italy Deaths:", as.numeric(IT_Ds_xts$Count[curr_len]),
"\nAs of:", time(IT_Ds_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### triple plots
#par(mfrow = c(3, 1), mar = c(3, 3, 3, 3))
png("It-NY-US_deaths_03042020.png", width = 480, height = 480)
plot(IT_Ds_xts, type = "S",
main = paste("Italy Deaths:", as.numeric(IT_Ds_xts$Count[curr_len]),
"\nNY Deaths:", as.numeric(NY_xtsd$Count[curr_len]),
"\nUS Deaths:", as.numeric(US_Ds_xts$Count[curr_len]),
"                                                     Date:", time(IT_Ds_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
lines(NY_xtsd, type = "S", col = "blue")
lines(US_Ds_xts, type = "S", col = "black")
dev.off()
plot(IT_Ds_xts, type = "S",
main = paste("Italy Deaths:", as.numeric(IT_Ds_xts$Count[curr_len]),
"\nNY Deaths:", as.numeric(NY_xtsd$Count[curr_len]),
"\nUS Deaths:", as.numeric(US_Ds_xts$Count[curr_len]),
"                                                     Date:", time(IT_Ds_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
lines(NY_xtsd, type = "S", col = "blue")
lines(US_Ds_xts, type = "S", col = "black")
plot(US_Ds_xts, type = "S",
main = paste("\nNY Deaths:", as.numeric(NY_xtsd$Count[curr_len]),
"\nUS Deaths:", as.numeric(US_Ds_xts$Count[curr_len]),
"                                                     Date:", time(US_Ds_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
lines(NY_xtsd, type = "S", col = "blue")
# load data
dat_Rs <- dat_recovered %>% gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long'))
### US
US_Rs <- dat_Rs %>%
filter(`Country/Region` == "US")
# convert Day from 'chr' to 'Date'
US_Rs %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
US_Rs_xts <- xts(US_Rs$CaseCount, order.by = US_Rs$Day)
names(US_Rs_xts) <- "Count"
curr_len <- nrow(US_Rs_xts)
plot(US_Rs_xts, type = "S",
main = paste("US Recovered Cases:", as.numeric(US_Rs_xts$Count[curr_len]),
"\nAs of:", time(US_Rs_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### CREATE NY_xtsd, NY Deaths ####
dat_nyr <- read_csv("./04-04-2020.csv")
dat_nycountr <- dat_nyr %>%
select(c(Province_State, Country_Region, Last_Update, Confirmed, Deaths, Recovered)) %>%
mutate(Last_Update = as.Date(Last_Update)) %>%
group_by(Province_State) %>%
summarise(Count = sum(Recovered, na.rm = TRUE)) %>%
filter(Province_State == "New York")
dat_nycountr
