max.P = 20, max.Q = 20, max.D = 3)
HS_SARIMA0
HS_SARIMA
HS_airline0 <- arima(as.numeric(HS), order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
HS_airline0
HS_airline0 <- arima(HS, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
HS_airline0
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2000, 1)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitAL_h
fitSAR_h <- auto.arima(HS, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Feb 2000 to Oct 2018
# Oct 2018 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Feb 2000 to Oct 2018
rt_h <- as.vector(window(HS, start = c(2000, 2), end = c(2018, 10)))
# calclate number of periods between out-of-sample start period, Feb 2000, and end period, Nov 2018
t_diff <- round((as.yearmon(strptime("01-11-2018", format = "%d-%m-%Y")) -
as.yearmon(strptime("01-02-2000", format = "%d-%m-%Y"))) * 12)
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2000, 1)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Feb 2000 to Oct 2018
# Oct 2018 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Feb 2000 to Oct 2018
rt_h <- as.vector(window(HS, start = c(2000, 2), end = c(2018, 10)))
# calculate the RMSE(h)
RMSE_1_AL <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_AL)
# function to calculate RMSE(h)
RMSE_h <- function(h, t_0, t_h, rt_h, rhat_h) {
# Arg       Desc                      Type/Format
# -----------------------------------------------
# h:        step-ahead                integer
# t_0:      t0                        integer
# t_h:      T                         integer
# rt_h:     Out-of-Sample ts values   numeric vector
# rhat_h:   Prediction ts values      numeric vector
return(sqrt(sum((rt_h - rhat_h)**2) / (t_h - h - t_0 + 1)))
}
# calculate the RMSE(h)
RMSE_1_AL <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_AL)
RMSE_1_SAR <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_SAR)
#####
# For h = 2
h <- 2
t0 <- 1
# calclate number of periods between out-of-sample start period, Feb 2008, and end period, Dec 2017
t_diff <- round((as.yearmon(strptime("01-10-2018", format = "%d-%m-%Y")) -
as.yearmon(strptime("01-03-2000", format = "%d-%m-%Y"))) * 12)
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2000, 2)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Mar 2000 to Sep 2018
# Sep 2018 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Mar 2000 to Sep 2018
rt_h <- as.vector(window(HS, start = c(2000, 3), end = c(2018, 9)))
# calculate the RMSE(h)
RMSE_1_AL <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_AL)
RMSE_1_SAR <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_SAR)
# For h = 1
h <- 1
t0 <- 0
# calclate number of periods between out-of-sample start period, Feb 2000, and end period, Nov 2018
t_diff <- round((as.yearmon(strptime("01-11-2018", format = "%d-%m-%Y")) -
as.yearmon(strptime("01-02-2000", format = "%d-%m-%Y"))) * 12)
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2000, 1)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Feb 2000 to Oct 2018
# Oct 2018 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Feb 2000 to Oct 2018
rt_h <- as.vector(window(HS, start = c(2000, 2), end = c(2018, 10)))
# calculate the RMSE(h)
RMSE_1_AL <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_AL)
RMSE_1_SAR <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_SAR)
#####
# For h = 2
h <- 2
t0 <- 1
# calclate number of periods between out-of-sample start period, Feb 2008, and end period, Dec 2017
t_diff <- round((as.yearmon(strptime("01-10-2018", format = "%d-%m-%Y")) -
as.yearmon(strptime("01-03-2000", format = "%d-%m-%Y"))) * 12)
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2000, 2)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Mar 2000 to Sep 2018
# Sep 2018 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Mar 2000 to Sep 2018
rt_h <- as.vector(window(HS, start = c(2000, 3), end = c(2018, 9)))
# calculate the RMSE(h)
RMSE_2_AL <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_AL)
RMSE_2_SAR <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_SAR)
#####
# For h = 12
h <- 12
t0 <- 11
# calclate number of periods between out-of-sample start period, Feb 2001, and end period, Nov 2017
t_diff <- round((as.yearmon(strptime("01-11-2017", format = "%d-%m-%Y")) -
as.yearmon(strptime("01-02-2001", format = "%d-%m-%Y"))) * 12)
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2001, 1)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Feb 2001 to Nov 2017
# Nov 2017 is the 'T-h' upper limit for the Sum in the formula
rhat_3_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_3_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
rm(rhat_3_AL)
rm(rhat_3_SAR)
# get rhat_h prediction values for out-of-sample periods, Feb 2001 to Nov 2017
# Nov 2017 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Feb 2001 to Nov 2017
rt_h <- as.vector(window(HS, start = c(2001, 2), end = c(2017, 11)))
# calclate number of periods between out-of-sample start period, Feb 2001, and end period, Dec 2017
t_diff <- round((as.yearmon(strptime("01-12-2017", format = "%d-%m-%Y")) -
as.yearmon(strptime("01-02-2001", format = "%d-%m-%Y"))) * 12)
# store sample time series values in a numeric vector
rt_train <- as.vector(window(HS, end = c(2001, 1)))
# fit Airline and SARIMA models
fitAL_h <- arima(rt_train, order = c(0, 1, 1),
seasonal = list(order = c(0, 1, 1), period = 12))
fitSAR_h <- auto.arima(rt_train, ic = "bic",
max.p = 20, max.q = 20, max.d = 3,
max.P = 20, max.Q = 20, max.D = 3)
# get rhat_h prediction values for out-of-sample periods, Feb 2001 to Nov 2017
# Nov 2017 is the 'T-h' upper limit for the Sum in the formula
rhat_h_AL <- as.vector(predict(fitAL_h, t_diff)$pred)
rhat_h_SAR <- as.vector(predict(fitSAR_h, t_diff)$pred)
# get the r(t+h) out-of-sample values from Feb 2001 to Nov 2017
rt_h <- as.vector(window(HS, start = c(2001, 2), end = c(2017, 11)))
# calculate the RMSE(h)
RMSE_3_AL <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_AL)
RMSE_3_SAR <- RMSE_h(h, t0, t_diff, rt_h, rhat_h_SAR)
# store results in a tibble
library(tibble)
RMSE_df <- tibble(Model = c("AR1", "MA2"))
add_column(RMSE_df, RMSE_1 = c(RMSE_1_AL, RMSE_1_SAR), RMSE_2 = c(RMSE_2_AL, RMSE_2_SAR),
RMSE_3 = c(RMSE_3_AL, RMSE_3_SAR))
# effective interest rate# => 1 + r_e = (1 + r/n)^12
r_e <- function(r, n) { ( 1 + r/n)**n }
# effective interest rate# => r_e = (1 + r/n)^n - 1
r_e <- function(r, n) { ( 1 + r/n)**n - 1 }
r_0575 <- r_e(0.0575, 12)
cci
cci <- function(P, r, t) { P * exp(r * t) }
P <- 3585; r <- 0.0615; t <- 2.5
A_0615 <- cci(P, r, t)
# The effective simple interest rate => e^(r) = 1 + r_e => r_e = e^(r) - 1
exp(r) - 1
### location 2621, Ito Processes, Langevin equation, Ornstein-Uhlenbeck equation
library(quantmod)
sonycorp <- getSymbols("SNE", from = "2001-08-13", to = "2002-08-12")
rm(sonycorp)
str(SNE)
length(SNE)
SNE_adj <- SNE$SNE.Adjusted
str(SNE_adj)
length(SNE_adj)
# plot using ggplot
library(ggplot2)
head(SNE_adj)
library(tidyverse)
# convert to df
SNE_df <- tibble(index(SNE_adj), stack(tibble(coredata(SNE_adj))))
# convert to df
SNE_df <- tibble(index(SNE_adj), stack(as.data.frame(coredata(SNE_adj))))
str(SNE_adj)
str(SNE_df)
class(SNE_df)
SNE_df
names(SNE_df)
str(SNE_adj)
str(SNE_adj$SNE.Adjusted)
head(SNE_adj)
SNE_adj$SNE.Adjusted$SNE.Adjusted
coredata(SNE_adj)
coredata(SNE_adj$SNE.Adjusted)
coredata(SNE_adj$SNE.Adjusted$SNE.Adjusted)
str(SNE_adj$SNE.Adjusted$SNE.Adjusted)
head(SNE_adj$SNE.Adjusted$SNE.Adjusted)
SNE_adj$SNE.Adjusted$SNE.Adjusted
SNE_adj$SNE.Adjusted$SNE.Adjusted["2002-08-09"]
SNE_adj["2002-08-09"]
SNE_adj[["2002-08-09"]]
SNE_adj["2002-08-09"][1]
SNE_adj["2002-08-09"][2]
SNE_adj["2002-08-09"][[1]]
coredata(SNE_adj)
coredata(SNE_adj[1])
coredata(SNE_adj[[1]])
coredata(SNE_adj[1])
coredata(SNE_adj)
str(coredata(SNE_adj))
head(coredata(SNE_adj))
names(coredata(SNE_adj))
names(SNE_adj)
head(SNE_adj)
head(SNE_adj)[1]
head(SNE_adj)[1][1]
sne_df <- coredata(SNE_adj)
names(sne_df)
str(sne_df)
head(sne_df)
str(sne_df)
dim(sne_df)
dimnames(sne_df)
sne_df[[2]]
sne_df[[1]]
sne_df[1]
sne_df
as.numeric(sne_df)
sne_n <- as.numeric(sne_df)
SNE_df <- tibble(index(SNE_adj), stack(as.data.frame(sne_df)))
SNE_df
SNE_df <- tibble(index(SNE_adj), stack(as.data.frame(sne_n)))
SNE_df
head(SNE_df)
sne_df[-3]
SNE_df
SNE_df[-3]
SNE_df[-2]
SNE_df[-1]
SNE_df[-1][1]
SNE_df[-1][[1]]
SNE_df <- data.frame(index(SNE_adj), stack(as.data.frame(sne_n)))
SNE_df
setwd("~/Documents/utils/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
install.packages("AlphaVantageClient")
library(xts)
library(tidyverse)
dat_confirmed <- read_csv("./time_series_covid19_confirmed_global.csv")
dat_deaths <- read_csv("./time_series_covid19_deaths_global.csv")
countries <- c("China", "Italy", "US")
# load data for confirmed
dat_dates <- dat_confirmed %>% gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long'))
dat_tidy <- dat_confirmed %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy) <- c("Day", "Country", "ConfirmedCases")
dat_countries <- NULL
for(c in countries) {
dat_countries <- bind_rows( dat_countries, filter(dat_tidy, Country == c))
}
ggplot(dat_countries, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-18"), y = 79000,
label = paste0("China = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 61000,
label = paste0("Italy = ", dat_countries$ConfirmedCases[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-21"), y = 35000,
label = paste0("US = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Confirmed Cases as of March 22 2020")
### US
US_dat <- dat_dates %>%
filter(`Country/Region` == "US")
# convert Day from 'chr' to 'Date'
US_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
US_xts <- xts(US_dat$CaseCount, order.by = US_dat$Day)
names(US_xts) <- "Count"
curr_len <- nrow(US_xts)
plot(US_xts, type = "S",
main = paste("US Confirmed Cases:", as.numeric(US_xts$Count[curr_len]),
"\nAs of:", time(US_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
tail(dat_dates)
tail(dat_confirmed)
dat_confirmed <- read_csv("./time_series_covid19_confirmed_global.csv")
dat_deaths <- read_csv("./time_series_covid19_deaths_global.csv")
countries <- c("China", "Italy", "US")
# load data for confirmed
dat_dates <- dat_confirmed %>% gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long'))
dat_tidy <- dat_confirmed %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy) <- c("Day", "Country", "ConfirmedCases")
dat_countries <- NULL
for(c in countries) {
dat_countries <- bind_rows( dat_countries, filter(dat_tidy, Country == c))
}
ggplot(dat_countries, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-18"), y = 79000,
label = paste0("China = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 61000,
label = paste0("Italy = ", dat_countries$ConfirmedCases[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-21"), y = 35000,
label = paste0("US = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Confirmed Cases as of March 22 2020")
ggplot(dat_countries, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-18"), y = 79000,
label = paste0("China = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 65000,
label = paste0("Italy = ", dat_countries$ConfirmedCases[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-21"), y = 50000,
label = paste0("US = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Confirmed Cases as of March 22 2020")
ggplot(dat_countries, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-18"), y = 79000,
label = paste0("China = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 65000,
label = paste0("Italy = ", dat_countries$ConfirmedCases[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-21"), y = 48000,
label = paste0("US = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Confirmed Cases as of March 22 2020")
ggplot(dat_countries, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-18"), y = 79000,
label = paste0("China = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 65000,
label = paste0("Italy = ", dat_countries$ConfirmedCases[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-21"), y = 46000,
label = paste0("US = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Confirmed Cases as of March 22 2020")
ggplot(dat_countries, aes(x = Day, y = ConfirmedCases, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-18"), y = 79000,
label = paste0("China = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 67000,
label = paste0("Italy = ", dat_countries$ConfirmedCases[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-21"), y = 46000,
label = paste0("US = ", dat_countries$ConfirmedCases[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Confirmed Cases as of March 22 2020")
# deaths
dat_tidy <- dat_deaths %>%
gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long')) %>%
select(`Country/Region`, Day, Cases) %>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
group_by(Day, `Country/Region`) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
names(dat_tidy) <- c("Day", "Country", "Deaths")
head(dat_tidy)
dat_countries <- NULL
for(c in countries) {
dat_countries <- bind_rows( dat_countries, filter(dat_tidy, Country == c))
}
str(dat_countries)
head(dat_countries)
ggplot(dat_countries, aes(x = Day, y = Deaths, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-13"), y = 3400,
label = paste0("China = ", dat_countries$Deaths[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-19"), y = 5600,
label = paste0("Italy = ", dat_countries$Deaths[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 600,
label = paste0("US = ", dat_countries$Deaths[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Deaths as of March 22 2020")
ggplot(dat_countries, aes(x = Day, y = Deaths, Country)) +
geom_step(aes(color = Country), direction = "vh", type = "S") +
annotate("text", x = as.Date("2020-03-13"), y = 3400,
label = paste0("China = ", dat_countries$Deaths[dim(dat_countries)[1]/3]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-19"), y = 6300,
label = paste0("Italy = ", dat_countries$Deaths[2 * (dim(dat_countries)[1]/3)]),
fontface = "bold", size = 3) +
annotate("text", x = as.Date("2020-03-20"), y = 800,
label = paste0("US = ", dat_countries$Deaths[dim(dat_countries)[1]]),
fontface = "bold", size = 3) +
ggtitle("Deaths as of March 22 2020")
# load data for confirmed
dat_dates <- dat_confirmed %>% gather(Day, Cases, -c('Province/State', 'Country/Region', 'Lat', 'Long'))
tail(dat_dates)
### US
US_dat <- dat_dates %>%
filter(`Country/Region` == "US")
# convert Day from 'chr' to 'Date'
US_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
US_xts <- xts(US_dat$CaseCount, order.by = US_dat$Day)
names(US_xts) <- "Count"
curr_len <- nrow(US_xts)
plot(US_xts, type = "S",
main = paste("US Confirmed Cases:", as.numeric(US_xts$Count[curr_len]),
"\nAs of:", time(US_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### NY
NY_dat <- dat_dates %>%
filter(`Country/Region` == "US") %>%
filter(`Province/State` == "New York")
# convert Day from 'chr' to 'Date'
NY_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases))
NY_xts <- xts(NY_dat$CaseCount, order.by = NY_dat$Day)
names(NY_xts) <- "Count"
curr_len <- nrow(NY_xts)
plot(NY_xts, type = "S",
main = paste("NY Confirmed Cases:", as.numeric(NY_xts$Count[curr_len]),
"\nAs of:", time(NY_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### Italy
IT_dat <- dat_dates %>%
filter(`Country/Region` == "Italy")
### NY
NY_dat <- dat_dates %>%
filter(`Country/Region` == "US") %>%
filter(`Province/State` == "New York")
### NY
NY_dat <- dat_dates %>%
filter(`Country/Region` == "US") %>%
filter(`Province/State` == "New York")
# convert Day from 'chr' to 'Date'
NY_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
NY_xts <- xts(NY_dat$CaseCount, order.by = NY_dat$Day)
names(NY_xts) <- "Count"
curr_len <- nrow(NY_xts)
plot(NY_xts, type = "S",
main = paste("NY Confirmed Cases:", as.numeric(NY_xts$Count[curr_len]),
"\nAs of:", time(NY_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
### Italy
IT_dat <- dat_dates %>%
filter(`Country/Region` == "Italy")
# convert Day from 'chr' to 'Date'
IT_dat %<>%
mutate(Day = as.Date(Day, format = "%m/%d/%y")) %>%
select(c(Day, Cases)) %>%
group_by(Day) %>%
summarise(CaseCount = sum(Cases, na.rm = TRUE))
IT_xts <- xts(IT_dat$CaseCount, order.by = IT_dat$Day)
names(IT_xts) <- "Count"
curr_len <- nrow(IT_xts)
plot(IT_xts, type = "S",
main = paste("Italy Confirmed Cases:", as.numeric(IT_xts$Count[curr_len]),
"\nAs of:", time(IT_xts[curr_len])),
col = "darkgreen", grid.col = "lightgrey", grid.ticks.lty = "dotted")
